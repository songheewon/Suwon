{{#contentFor "custom_body_class"}} shop-template{{/contentFor}}
<div style="display:none !important;">{{product_categories}}</div>
<ul class="s-products-navigation__list" style="padding-top: 50px;">
  <li class="s-products-navigation__item s-products-navigation__item--all">
    <a href="{{@site.url}}/shop/" class="s-products-navigation__link{{#match which " home"}}
      s-products-navigation__link--current{{/match}} {{link_class for=(concat @site.url "/shop/" )
      activeClass="s-products-navigation__link--current" }}" >{{t '전체보기'}}</a>
  </li>
  {{#foreach product_categories}}
  <li class="s-products-navigation__item s-products-navigation__item--{{slug}}">{{#link href=(url)
    class="s-products-navigation__link" activeClass="s-products-navigation__link--current"}}{{label}}{{/link}}</li>
  {{/foreach}}
</ul>
<div class="s-products__container">
  <div class="s-products-main" style="background-color: #F3F3EF;">
    <div class="o-grid" style="padding-left: 0; padding-right: 0;">
      <div class="o-grid__col o-grid__col--full" style="padding-top: 40px">
        {{> common/products/list static=static filter=filter }}
        {{> common/products/pagination }}
      </div>
    </div>
  </div>
</div>


{{#contentFor "scripts"}}
<script>
  const hasNextPage = () => {
    var nextElement = document.querySelector('link[rel=next]');
    if (nextElement) {
      return true;
    }
    return false;
  }

  const disableLoadMore = () => {
    var loadMoreAction = document.querySelectorAll('.js-load-more');
    if (loadMoreAction.length) {
      [].map.call(loadMoreAction, function (obj, idx) {
        obj.classList.remove('active');
      });
    }
  }

  const activeLoadMore = () => {
    var loadMoreAction = document.querySelectorAll('.js-load-more');
    if (loadMoreAction.length) {
      [].map.call(loadMoreAction, function (obj, idx) {
        obj.classList.add('active');
      });
    }
  }

  const updateContents = (item) => {
    var feedElement = document.querySelector('.js-content-feed');
    if (feedElement) {
      feedElement.appendChild(item);
    }
  }

  //set load more event listener
  document.addEventListener("DOMContentLoaded", function () {
    if (hasNextPage()) {
      activeLoadMore();
    }

    var nextElement = document.querySelector('link[rel=next]');
    var loadMoreAction = document.querySelectorAll('.js-load-more');
    if (loadMoreAction.length) {
      [].map.call(loadMoreAction, function (obj) {
        obj.addEventListener('click', function (e) {
          e.preventDefault();

          if (hasNextPage() && nextElement) {
            var xhr = new window.XMLHttpRequest();

            xhr.open('GET', nextElement.href);
            xhr.responseType = 'document';
            xhr.onreadystatechange = () => {
              if (xhr.readyState === XMLHttpRequest.DONE) {
                const status = xhr.status;
                if (status === 0 || (status >= 200 && status < 400)) {
                  var postElements = xhr.response.querySelectorAll('.js-content-card');
                  postElements.forEach(function (item) {
                    updateContents(item);
                  });

                  var resNextElement = xhr.response.querySelector('link[rel=next]');
                  if (resNextElement) {
                    nextElement.href = resNextElement.href;
                  } else {
                    nextElement = false;
                    disableLoadMore();
                  }
                } else {
                  //False
                }
              }
            };
            xhr.send(null);
          }
        });
      });
    }
  });
</script>
{{/contentFor}}
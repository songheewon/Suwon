{{#get "posts" filter="featured:true" include="tags" limit="1" order="published_at desc"}}
{{#if posts}}
<div class="carousel-container">
    <div class="carousel">
        {{#foreach posts}}       
        <a class="carousel-slide {{#if @first}}active{{/if}}" href="{{url}}">
            {{#if feature_image}}
            <img class="carousel-image" src="{{feature_image}}" alt="{{title}}" loading="lazy">
            {{/if}}
            <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(
            to top,
            rgba(0, 0, 0, 0.85) 0%,
            rgba(0, 0, 0, 0.5) 40%,
            rgba(0, 0, 0, 0.2) 70%,
            rgba(0, 0, 0, 0) 100%
        );"></div>
            <div class="carousel-content">
                {{#if primary_tag}}
                <div class="carousel-primary-tag">{{primary_tag.name}}</div>
                {{/if}}
                <div class="carousel-title">{{title}}</div>
            </div>
        </a>
        {{/foreach}}
        {{!-- <div class="carousel-navigation">
            <button class="carousel-nav carousel-prev">
                <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_139_3)">
            <path d="M5.0126 8.4516L17.9381 8.4513L17.9381 10.5751L5.0136 10.5758L10.7089 16.2711L9.20703 17.773L0.947265 9.51318L9.20703 1.25341L10.7089 2.75528L5.0126 8.4516Z" fill="white"/>
            </g>
            <defs>
            <clipPath id="clip0_139_3">
            <rect width="12.7652" height="12.7652" fill="white" transform="translate(9.02637 0.460449) rotate(45)"/>
            </clipPath>
            </defs>
            </svg>
            </button>
            <div class="carousel-pagination">
                <span class="current-slide">1</span>
                <span class="total-slides">/&nbsp;<span class="total-slides-count"></span></span>
            </div>
            <button class="carousel-nav carousel-next">
                <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_139_3)">
                <path d="M13.9874 10.5484L1.06191 10.5487L1.06191 8.42491L13.9864 8.42421L8.29109 2.72892L9.79297 1.22705L18.0527 9.48682L9.79297 17.7466L8.29109 16.2447L13.9874 10.5484Z" fill="white"/>
                </g>
                <defs>
                <clipPath id="clip0_139_3">
                <rect width="12.7652" height="12.7652" fill="white" transform="translate(9.02637 0.460449) rotate(45)"/>
                </clipPath>
                </defs>
                </svg>
            </button>
        </div> --}}
    </div>
</div>
{{/if}}
{{/get}}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const slides = document.querySelectorAll('.carousel-slide');
        const prevButton = document.querySelector('.carousel-prev');
        const nextButton = document.querySelector('.carousel-next');
        const currentSlideElement = document.querySelector('.current-slide');
        const totalSlidesElement = document.querySelector('.total-slides-count');
        let currentSlide = 0;
        let isTransitioning = false;

        // Set total slides count on page load
        totalSlidesElement.textContent = slides.length;

        function updateNavigationButtons() {
            // 첫 번째 슬라이드일 때 이전 버튼 비활성화
            if (currentSlide === 0) {
                prevButton.disabled = true;
                prevButton.style.opacity = '0.2';
            } else {
                prevButton.disabled = false;
                prevButton.style.opacity = '1';
            }

            // 마지막 슬라이드일 때 다음 버튼 비활성화
            if (currentSlide === slides.length - 1) {
                nextButton.disabled = true;
                nextButton.style.opacity = '0.2';
            } else {
                nextButton.disabled = false;
                nextButton.style.opacity = '1';
            }
        }

        function showSlide(index) {
            slides.forEach(slide => {
                slide.classList.remove('active');
            });
            
            slides[index].classList.add('active');
            currentSlide = index;
            currentSlideElement.textContent = (index + 1).toString();
            updateNavigationButtons();
        }

        function nextSlide() {
            if (currentSlide < slides.length - 1) {
                currentSlide++;
                showSlide(currentSlide);
            }
        }

        function prevSlide() {
            if (currentSlide > 0) {
                currentSlide--;
                showSlide(currentSlide);
            }
        }

        // Auto-advance slides every 5 seconds
        let slideInterval = setInterval(() => {
            if (currentSlide < slides.length - 1) {
                nextSlide();
            } else {
                clearInterval(slideInterval);
            }
        }, 5000);

        // Reset interval when manually changing slides
        function resetInterval() {
            clearInterval(slideInterval);
            slideInterval = setInterval(() => {
                if (currentSlide < slides.length - 1) {
                    nextSlide();
                } else {
                    clearInterval(slideInterval);
                }
            }, 5000);
        }

        // Event listeners
        nextButton.addEventListener('click', () => {
            if (currentSlide < slides.length - 1) {
                nextSlide();
                resetInterval();
            }
        });

        prevButton.addEventListener('click', () => {
            if (currentSlide > 0) {
                prevSlide();
                resetInterval();
            }
        });

        // Pause on hover
        const carousel = document.querySelector('.carousel');
        carousel.addEventListener('mouseenter', () => clearInterval(slideInterval));
        carousel.addEventListener('mouseleave', () => resetInterval());

        // 초기 상태 설정
        showSlide(0);
        updateNavigationButtons();
    });
</script>